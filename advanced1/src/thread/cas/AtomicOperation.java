package thread.cas;

public class AtomicOperation {
    /*
    컴퓨터 과학에서 사용하는 원자적 연산(atomic operation)의 의미는 해당 연산이 더 이상 나눌 수 없는 단위로 수행된다는 것을 의미한다.
    즉, 원자적 연산은 중단되지 않고 다른 연산과 간섭 없이 완전히 실행되거나 전혀 실행되지 않는 성질을 가지고 있다.
    쉽게 이야기해서 멀티스레드 상황에서 다른 스레드의 간섭 없이 안전하게 처리되는 연산이라는 뜻이다.

    예를 들어서 다음과 같은 필드가 있다.
    volatile int i = 0 ;

    다음 연산은 둘로 쪼갤 수 없는 원자적 연산이다.
    i = 1
    왜냐하면 이 연산은 다음 단 하나의 순서로 실행되기 때문이다.
        - 오른쪽에 있는 1 의 값은 왼쪽의 i 변수에 대입한다.
    하지만 다음 연산은 원자적 연산이 아니다.
    i = i + 1;
    왜냐하면 이 연산은 다음 순서로 나누어 실행되기 때문이다.
        - 오른쪽에 있는 i 의 값을 읽는다. i 의 값은 10이다.
        - 읽은 10에 1을 더해서 11을 만든다.
        - 더한 11을 왼쪽의 i 변수에 대입한다.

    원자적 연산은 멀티스레드 상황에서 아무런 문제가 발생하지 않는다.
    하지만 원자적 연산이 아닌 경우에는 synchronized 블럭이나 Lock 등을 사용해서 안전한 임계 영역을 만들어야 한다.
    */
}
